// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Better Auth fields
  emailVerified DateTime?
  image         String?

  // Relations
  accounts    Account[]
  sessions    Session[]
  problems    Problem[]
  submissions Submission[]
  name        String?

  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  token        String
  createdAt    DateTime
  updatedAt    DateTime
  ipAddress    String?
  userAgent    String?

  @@unique([token])
  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Problem {
  id          String   @id @default(cuid())
  title       String
  description String
  difficulty  String // EASY, MEDIUM, HARD
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  submissions Submission[]
  createdBy   User         @relation(fields: [createdById], references: [id])
  createdById String
}

model Submission {
  id        String   @id @default(cuid())
  code      String
  language  String
  status    String // ACCEPTED, WRONG_ANSWER, RUNTIME_ERROR, etc.
  runtime   Int? // in milliseconds
  memory    Int? // in MB
  createdAt DateTime @default(now())

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  problem   Problem @relation(fields: [problemId], references: [id])
  problemId String
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
